{% macro sentencecase(text) %}
    {{- text[0]|upper}}{{text[1:] -}}
{% endmacro %}
{{ BASE }}

# pysnirf2 dot jinja output
# generated by {{ USER }} on {{ DATE }}
{% for GROUP in GROUPS %}


class {{ sentencecase(GROUP.name) -}}(_Group):

    {% for CHILD in GROUP.children %}
    {{ CHILD.name }} = None
    {% endfor %}

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)
        {% for CHILD in GROUP.children %}
        {% if '{{TYPES.INDEXED_GROUP}}' in CHILD.type %}
        self.{{- CHILD.name }} = {{ sentencecase(CHILD.name) }}(self._group)  # Indexed group
        {% elif '{{TYPES.GROUP}}' in CHILD.type %}
        if '{{ CHILD.name }}' in self._group.keys():
            self.{{- CHILD.name }} = {{ sentencecase(CHILD.name) }}(self._group['{{CHILD.name}}'].id)  # Group
        else:
            print('{{CHILD.name}}', 'not found in', '{{GROUP.name}}')
        {% else %}
        if '{{ CHILD.name }}' in self._group.keys():
            if 
            self.{{- CHILD.name }} = self._group['{{ CHILD.name }}'][0]
        else:
            print('{{CHILD.name}}', 'not found in', '{{GROUP.name}}')
        {% endif %}
        {% endfor %}
{% endfor %}
{% for INDEXED_GROUP in INDEXED_GROUPS %}


class {{ sentencecase(INDEXED_GROUP.name) -}}Element(_Group):

    {% for CHILD in INDEXED_GROUP.children %}
    {{ CHILD.name }} = None
    {% endfor %}

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)


class {{ sentencecase(INDEXED_GROUP.name) -}}(_IndexedGroup):

    _name: str = '{{ INDEXED_GROUP.name }}'
    _element: _Group = {{ sentencecase(INDEXED_GROUP.name) -}}Element

    def __init__(self, f: h5py.File):
        super().__init__(f)

    def _append_group(self, gid):
        self.append({{ sentencecase(INDEXED_GROUP.name) -}}Element(gid))
{% endfor %}


class Snirf():
    
    _name = '/'
    formatVersion: str = None
    nirs: Nirs = ()
    
    def __init__(self, argv):
        if not argv.endswith('.snirf'):
            path = argv.join('.snirf')
        else:
            path = argv
        if os.path.exists(path):
            self._f = h5py.File(path, 'r+')
            print('Loading snirf', path)
            keys = self._f.keys()
            if 'formatVersion' in keys:
                self.formatVersion = self._f['formatVersion'][0].decode('ascii')
#            else:
#                raise SnirfFormatError(path, 'does not have a valid formatVersion')
            self.nirs = Nirs(self._f)

    def __repr__(self):
        return str(vars(self))

    def __del__(self):
        # TODO: this may be redundant
        self._f.close()
        