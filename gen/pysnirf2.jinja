{% macro sentencecase(text) %}
    {{- text[0]|upper}}{{text[1:] -}}
{% endmacro %}
{% macro initmembers(NODE) %}
    {% for CHILD in NODE.children %}
    {% if TYPES.INT_VALUE in CHILD.type %}
        {% set python_type = 'int' %}
    {% elif TYPES.FLOAT_VALUE in CHILD.type %}
        {% set python_type = 'float' %}
    {% elif TYPES.VARLEN_STRING in CHILD.type %}
        {% set python_type = "'<U13'" %}
    {% else %}
        {% set python_type = 'float' %}
    {% endif %}
    {% if TYPES.INDEXED_GROUP in CHILD.type %}
    self.{{- CHILD.name }} = {{ sentencecase(CHILD.name) }}(self._h, self._cfg)  # Indexed group
    {% else %}
    if '{{ CHILD.name }}' in self._h.keys():
    {% if TYPES.GROUP in CHILD.type %}
        self._{{- CHILD.name }} = {{ sentencecase(CHILD.name) }}(self._h['{{CHILD.name}}'].id, self._cfg)  # Group
    {% elif TYPES.ARRAY_1D in CHILD.type %}
        if not self._cfg.dynamic_loading:
            self._{{- CHILD.name }} = np.array(self._h['{{CHILD.name}}']).astype({{ python_type }})  # 1D array
    {% elif TYPES.ARRAY_2D in CHILD.type %}
        if not self._cfg.dynamic_loading:
            self._{{- CHILD.name }} = np.array(self._h['{{CHILD.name}}']).astype({{ python_type }})  # 2D array
    {% elif TYPES.VARLEN_STRING in CHILD.type %}
        if not self._cfg.dynamic_loading:
            self._{{- CHILD.name }} = self._h['{{ CHILD.name }}'][0].decode('ascii')  # String
    {% else %}
        if not self._cfg.dynamic_loading:
            self._{{- CHILD.name }} = {{ python_type }}(self._h['{{ CHILD.name }}'][0])
    {% endif %}
    {% if (TYPES.REQUIRED in CHILD.type) and not ((TYPES.REQUIRED + '1' in CHILD.type) or (TYPES.REQUIRED + '2' in CHILD.type)) %}
    else:
        warn(str(self.__class__.__name__) + ' missing required key ' + '"{{CHILD.name}}"')
    {% endif %}
    {% endif %}

    {% endfor %}
{% endmacro %}
{% macro initproperties(NODE) %}
{% for CHILD in NODE.children %}
    {% if TYPES.INT_VALUE in CHILD.type %}
        {% set python_type = 'int' %}
    {% elif TYPES.FLOAT_VALUE in CHILD.type %}
        {% set python_type = 'float' %}
    {% elif TYPES.VARLEN_STRING in CHILD.type %}
        {% set python_type = "'<U13'" %}
    {% else %}
        {% set python_type = 'float' %}
    {% endif %}
    @property
    def {{ CHILD.name }}(self):
    {% if TYPES.INDEXED_GROUP in CHILD.type %}
        return self._{{ CHILD.name }}
    {% elif TYPES.GROUP in CHILD.type %}
        if '{{ CHILD.name }}' in self._h.keys():
            return self._{{ CHILD.name }}
    {% else %}
        if self._cfg.dynamic_loading:
            if '{{ CHILD.name }}' in self._h.keys():
    {% if TYPES.ARRAY_1D in CHILD.type %}
                return np.array(self._h['{{ CHILD.name }}']).astype({{ python_type }})  # 1D array
    {% elif TYPES.ARRAY_2D in CHILD.type %}
                return np.array(self._h['{{ CHILD.name }}']).astype({{ python_type }})  # 2D array
    {% elif TYPES.VARLEN_STRING in CHILD.type %}
                return self._h['{{ CHILD.name }}'][0].decode('ascii')  # String
    {% else %}
                return {{ python_type }}(self._h['{{ CHILD.name }}'][0])
    {% endif %}
        return self._{{ CHILD.name }}
    {% endif %}

    @{{ CHILD.name }}.setter
    def {{ CHILD.name }}(self, value):
        self._{{ CHILD.name }} = value

    {% endfor %}
{% endmacro %}
{{ BASE }}

# generated by {{ USER }} on {{ DATE }}
# version {{ VERSION }} SNIRF specification parsed from {{ SPEC_SRC }}
{% for GROUP in GROUPS %}


class {{ sentencecase(GROUP.name) -}}(_Group):

    {% for CHILD in GROUP.children %}
    _{{ CHILD.name }} = None  # {{ CHILD.type }}
    {% endfor %}

    def __init__(self, gid: h5py.h5g.GroupID, cfg: SnirfConfig):
        super().__init__(gid, cfg)
    {{ initmembers(GROUP) | indent }}
{{ initproperties(GROUP) }}

{% endfor %}
{% for INDEXED_GROUP in INDEXED_GROUPS %}


class {{ sentencecase(INDEXED_GROUP.name) -}}Element(_Group):

    {% for CHILD in INDEXED_GROUP.children %}
    _{{ CHILD.name }} = None  # {{ CHILD.type }}
    {% endfor %}

    def __init__(self, gid: h5py.h5g.GroupID, cfg: SnirfConfig):
        super().__init__(gid, cfg)
    {{ initmembers(INDEXED_GROUP) | indent }}
{{ initproperties(INDEXED_GROUP) }}


class {{ sentencecase(INDEXED_GROUP.name) -}}(_IndexedGroup):

    _name: str = '{{ INDEXED_GROUP.name }}'
    _element: _Group = {{ sentencecase(INDEXED_GROUP.name) -}}Element

    def __init__(self, h: h5py.File, cfg: SnirfConfig):
        super().__init__(h, cfg)

    # override
    def _append_group(self, gid):
        self.append({{ sentencecase(INDEXED_GROUP.name) -}}Element(gid, self._cfg))
{% endfor %}


class Snirf():
    
    _name = '/'
    {% for CHILD in ROOT.children %}
    _{{ CHILD.name }} = None  # {{ CHILD.type }}
    {% endfor %}
    
    def __init__(self, argv, dynamic_loading: bool = True):
        if not argv.endswith('.snirf'):
            path = argv.join('.snirf')
        else:
            path = argv
        if os.path.exists(path):
            self._h = h5py.File(path, 'r+')
            self._cfg = SnirfConfig()
            self._cfg.dynamic_loading = dynamic_loading
            self._cfg.filepath = path
        {{ initmembers(ROOT) | indent(8) }}
        else:
            raise FileNotFoundError('Unable to find file: name =' + path)
{{ initproperties(ROOT) }}

    def __repr__(self):
        props = [p for p in dir(self) if '_' not in p]
        out = 'Snirf object loaded from ' + self._cfg.filepath
        for prop in props:
            out += prop + ': ' + str(getattr(self, prop)) + '\n'
        return str(out)
        