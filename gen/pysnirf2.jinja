{% macro sentencecase(text) %}
    {{- text[0]|upper}}{{text[1:] -}}
{% endmacro %}
{% macro init_members(NODE) %}
    {% for CHILD in NODE.children %}
    {% if TYPES.INT_VALUE in CHILD.type %}
        {% set python_type = 'int' %}
    {% elif TYPES.FLOAT_VALUE in CHILD.type %}
        {% set python_type = 'float' %}
    {% elif TYPES.VARLEN_STRING in CHILD.type %}
        {% set python_type = 'str' %}
    {% else %}
        {% set python_type = 'float' %}
    {% endif %}
    {% if TYPES.INDEXED_GROUP in CHILD.type %}
    self.{{- CHILD.name }} = {{ sentencecase(CHILD.name) }}(self._h, self._cfg)  # Indexed group
    {% elif TYPES.GROUP in CHILD.type %}
    if '{{ CHILD.name }}' in self._h.keys():
        self._{{- CHILD.name }} = {{ sentencecase(CHILD.name) }}(self._h['{{ CHILD.name }}'].id, self._cfg)  # Group
        {% if TYPES.REQUIRED in CHILD.type %}
    else:  # Create an empty group
        self._h.create_group('{{ CHILD.name }}')
        self._{{ CHILD.name }} = {{ sentencecase(CHILD.name) }}(self._h['{{ CHILD.name }}'].id, self._cfg)  # Group
        {% endif %}
    {% else %}
    if '{{ CHILD.name }}' in self._h.keys():
        {% if (TYPES.ARRAY_1D in CHILD.type) or (TYPES.ARRAY_2D in CHILD.type) %}
        if not self._cfg.dynamic_loading:
            self._{{- CHILD.name }} = np.array(self._h['{{ CHILD.name }}']).astype({{ python_type }})  # Array
        {% elif TYPES.VARLEN_STRING in CHILD.type %}
        if not self._cfg.dynamic_loading:
            self._{{- CHILD.name }} = _read_string(self._h['{{ CHILD.name }}'])
        {% else %}
        if not self._cfg.dynamic_loading:
            self._{{- CHILD.name }} = {{ python_type }}(self._h['{{ CHILD.name }}'][()])
        {% endif %}
        {% if (TYPES.REQUIRED in CHILD.type) and not ((TYPES.REQUIRED + '1' in CHILD.type) or (TYPES.REQUIRED + '2' in CHILD.type)) %}
    else:
        warn(str(self.__class__.__name__) + ' missing required key ' + '"{{ CHILD.name }}"')
        {% endif %}
    {% endif %}
    {% endfor %}
{% endmacro %}
{% macro gen_properties(NODE) %}
{% for CHILD in NODE.children %}
    {% if TYPES.INT_VALUE in CHILD.type %}
        {% set python_type = 'int' %}
    {% elif TYPES.FLOAT_VALUE in CHILD.type %}
        {% set python_type = 'float' %}
    {% elif TYPES.VARLEN_STRING in CHILD.type %}
        {% set python_type = 'str' %}
    {% else %}
        {% set python_type = 'float' %}
    {% endif %}
    @property
    def {{ CHILD.name }}(self):
    {% if TYPES.INDEXED_GROUP in CHILD.type %}
        return self._{{ CHILD.name }}
    {% elif TYPES.GROUP in CHILD.type %}
        if '{{ CHILD.name }}' in self._h.keys():
            return self._{{ CHILD.name }}
    {% else %}
        if type(self._{{ CHILD.name }}) is AbsentDataset:
            if self._cfg.dynamic_loading:
                if '{{ CHILD.name }}' in self._h.keys():
    {% if (TYPES.ARRAY_1D in CHILD.type) or (TYPES.ARRAY_2D in CHILD.type) %}
                    return np.array(self._h['{{ CHILD.name }}']).astype({{ python_type }})  # Array
    {% elif TYPES.VARLEN_STRING in CHILD.type %}
                    return _read_string(self._h['{{ CHILD.name }}'])
    {% else %}
                    return {{ python_type }}(self._h['{{ CHILD.name }}'][()])
    {% endif %}
            else:
                return None
        else:
            return self._{{ CHILD.name }}
    {% endif %}

    @{{ CHILD.name }}.setter
    def {{ CHILD.name }}(self, value):
        self._{{ CHILD.name }} = value

    @{{ CHILD.name }}.deleter
    def {{ CHILD.name }}(self):
        {% if TYPES.INDEXED_GROUP in CHILD.type %}
        raise AttributeError('IndexedGroup ' + str(type(self._{{ CHILD.name }})) + ' cannot be deleted')
        {% elif TYPES.GROUP in CHILD.type %}
        self._{{ CHILD.name }} = AbsentGroup()
        {% else %}
        self._{{ CHILD.name }} = AbsentDataset()
        {% endif %}

    {% endfor %}
{% endmacro %}
{% macro gen_writer(NODE) %}
    def _save(self, *args):
        if len(args) > 0 and type(args[0]) is h5py.File:
            file = args[0]
        else:
            file = self._h.file
{% for CHILD in NODE.children %}
    {% if TYPES.INT_VALUE in CHILD.type %}
        {% set h5_type = "'i4'" %}
    {% elif TYPES.FLOAT_VALUE in CHILD.type %}
        {% set h5_type = "'f8'" %}
    {% elif TYPES.VARLEN_STRING in CHILD.type %}
        {% set h5_type = "h5py.string_dtype(encoding='ascii', length=None)" %}
    {% else %}
        {% set h5_type = "'f8'" %}
    {% endif %}
    {% if TYPES.INDEXED_GROUP in CHILD.type %}
        self.{{ CHILD.name }}._save(*args)
    {% elif TYPES.GROUP in CHILD.type %}
        if type(self._{{ CHILD.name }}) is AbsentGroup:
            del self._h[{{ CHILD.name }}]
        else:
            self.{{ CHILD.name }}._save(*args)
    {% else %}
        if '{{ CHILD.name }}' in self._h:
            name = self._h['{{ CHILD.name }}'].name
        else:
            name = self._h.name + '/{{ CHILD.name }}'
        {% if (TYPES.ARRAY_1D in CHILD.type) or (TYPES.ARRAY_2D in CHILD.type) %}
            {% if TYPES.VARLEN_STRING in CHILD.type %}
        data = np.array(self.{{ CHILD.name }}).astype('O')
            {% else %}
        data = np.array(self.{{ CHILD.name }})
            {% endif %}
        {% elif TYPES.VARLEN_STRING in CHILD.type %}
        data = self.{{ CHILD.name }}
        {% else %}
        data = self.{{ CHILD.name }}
        {% endif %}
        if name in file:
            del file[name]
        if type(data) is not AbsentDataset:
            file.create_dataset(name, dtype={{ h5_type }}, data=data)
    {% endif %}
    {% endfor %}
{% endmacro %}
{{ BASE }}

# generated by {{ USER }} on {{ DATE }}
# version {{ VERSION }} SNIRF specification parsed from {{ SPEC_SRC }}


{% for GROUP in GROUPS %}
class {{ sentencecase(GROUP.name) -}}(Group):

    {% for CHILD in GROUP.children %}
    _{{ CHILD.name }} = AbsentDataset()  # {{ CHILD.type }}
    {% endfor %}

    def __init__(self, gid: h5py.h5g.GroupID, cfg: SnirfConfig):
        super().__init__(gid, cfg)
    {{ init_members(GROUP) | indent }}
{{ gen_properties(GROUP) }}
{{ gen_writer(GROUP) }}


{% endfor %}
{% for INDEXED_GROUP in INDEXED_GROUPS %}
class {{ sentencecase(INDEXED_GROUP.name) -}}Element(Group):

    {% for CHILD in INDEXED_GROUP.children %}
    _{{ CHILD.name }} = AbsentDataset()  # {{ CHILD.type }}
    {% endfor %}

    def __init__(self, gid: h5py.h5g.GroupID, cfg: SnirfConfig):
        super().__init__(gid, cfg)
    {{ init_members(INDEXED_GROUP) | indent }}
{{ gen_properties(INDEXED_GROUP) }}
{{ gen_writer(INDEXED_GROUP) }}

class {{ sentencecase(INDEXED_GROUP.name) -}}(IndexedGroup):

    _name: str = '{{ INDEXED_GROUP.name }}'
    _element: Group = {{ sentencecase(INDEXED_GROUP.name) -}}Element

    def __init__(self, h: h5py.File, cfg: SnirfConfig):
        super().__init__(h, cfg)


{% endfor %}
class Snirf():
    
    _name = '/'
    {% for CHILD in ROOT.children %}
    _{{ CHILD.name }} = AbsentDataset()  # {{ CHILD.type }}
    {% endfor %}

    def __init__(self, *args, dynamic_loading: bool = False):
        if len(args) > 0:
            path = args[0]
            if type(path) is str:
                if not path.endswith('.snirf'):
                    path = path.join('.snirf')
                if os.path.exists(path):
                    self._h = h5py.File(path, 'r+')
                else:
                    self._h = h5py.File(path, 'w')
            else:
                raise TypeError(str(path) + ' is not a valid filename')
        else:
            self._h = h5py.File(TemporaryFile(), 'w')
        self._cfg = SnirfConfig()
        self._cfg.dynamic_loading = dynamic_loading
    {{ init_members(ROOT) | indent }}
{{ gen_properties(ROOT) }}
{{ gen_writer(ROOT) }}

    # overload
    def save(self, path: str):
        ...

    def save(self, *args):
        '''
        Save changes you have made to the Snirf object to disk. If a filepath is supplied, the changes will be
        'saved as' in a new file.
        '''
        if len(args) > 0 and type(args[0]) is str:
            path = args[0]
            if not path.endswith('.snirf'):
                path += '.snirf'
            new_file = h5py.File(path, 'w')
            self._save(new_file)
            new_file.close()
        else:
            self._save()

    @property
    def filename(self):
        return self._h.filename

    def close(self):
        self._h.close()

    def __del__(self):
        self._h.close()

    def __repr__(self):
        props = [p for p in dir(self) if ('_' not in p and not callable(getattr(self, p)))]
        out = str(self.__class__.__name__) + ' at /' + '\n'
        for prop in props:
            attr = getattr(self, prop)
            out += prop + ': '
            if type(attr) is np.ndarray or type(attr) is list:
                if np.size(attr) > 32:
                    out += '<' + str(np.shape(attr)) + ' array of ' + str(attr.dtype) + '>'
                else:
                    out += str(attr)
            else:
                prepr = str(attr)
                if len(prepr) < 64:
                    out += prepr
                else:
                    out += '\n' + prepr
            out += '\n'
        return out[:-1]
