from abc import ABC, abstractmethod
import h5py
import os
import sys

if sys.version_info[0] < 3:
    raise ImportError('pysnirf2 requires Python > 3')


class SnirfFormatError(Exception):
    pass


class _Group():
    
    def __init__(self, gid: h5py.h5g.GroupID):
        self._id = gid
        if not isinstance(gid, h5py.h5g.GroupID):
            raise TypeError('must initialize with a Group ID')
        self._group = h5py.Group(self._id)

    def __repr__(self):
        return str(list(filter(lambda x: not x.startswith('_'), vars(self).keys())))



class _IndexedGroup(list, ABC):
    """
    Represents the "indexed group" which is defined by v1.0 of the SNIRF
    specification as:
        If a data element is an HDF5 group and contains multiple sub-groups,
        it is referred to as an indexed group. Each element of the sub-group
        is uniquely identified by appending a string-formatted index (starting
        from 1, with no preceding zeros) in the name, for example, /.../name1
        denotes the first sub-group of data element name, and /.../name2
        denotes the 2nd element, and so on.
    """
    
    _name: str = ''
    _element: _Group = None
    
    def __init__(self, parent):
        if isinstance(parent, (h5py.Group, h5py.File)):
            # Because the indexed group is not a true HDF5 group but rather an
            # iterable list of HDF5 groups, it takes a base group or file and
            # searches its keys, appending the appropriate elements to itself
            # in order
            self._parent = parent
            print('class name', self.__class__.__name__, 'signature', self._name)
            i = 1
            for key in self._parent.keys():
                name = str(key).split('/')[-1]
                print('Looking for keys starting with', self._name)
                if key.startswith(self._name):
                    if key.endswith(str(i)):
                        print('adding numbered key', i, name)
                        self.append(self._element(self._parent[key].id))
                        i += 1
                    elif i == 1 and key.endswith(self._name):
                        print('adding non-numbered key', name)
                        self.append(self._element(self._parent[key].id))
           
        else:
            raise TypeError('must initialize _IndexedGroup with a Group or File')
         
    def __new__(cls, *args, **kwargs):
        if cls is _IndexedGroup:
            raise NotImplementedError('_IndexedGroup is an abstract class')
        return super().__new__(cls, *args, **kwargs)
            
    @abstractmethod
    def _append_group(self, gid: h5py.h5g.GroupID):
        raise NotImplementedError('_append_group is an abstract method')
    
    def __repr__(self):
        prettylist = ''
        for i in range(len(self)):
            prettylist += (str(self[i]) + '\n')
        return prettylist


# pysnirf2 dot jinja output
# generated by sstucker on 2021-11-16


class MetaDataTags(_Group):

    SubjectID = None
    MeasurementDate = None
    MeasurementTime = None
    LengthUnit = None
    TimeUnit = None
    FrequencyUnit = None

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)
        if 'SubjectID' in self._group.keys():
            if 
            self.SubjectID = self._group['SubjectID'][0]
        else:
            print('SubjectID', 'not found in', 'metaDataTags')
        if 'MeasurementDate' in self._group.keys():
            if 
            self.MeasurementDate = self._group['MeasurementDate'][0]
        else:
            print('MeasurementDate', 'not found in', 'metaDataTags')
        if 'MeasurementTime' in self._group.keys():
            if 
            self.MeasurementTime = self._group['MeasurementTime'][0]
        else:
            print('MeasurementTime', 'not found in', 'metaDataTags')
        if 'LengthUnit' in self._group.keys():
            if 
            self.LengthUnit = self._group['LengthUnit'][0]
        else:
            print('LengthUnit', 'not found in', 'metaDataTags')
        if 'TimeUnit' in self._group.keys():
            if 
            self.TimeUnit = self._group['TimeUnit'][0]
        else:
            print('TimeUnit', 'not found in', 'metaDataTags')
        if 'FrequencyUnit' in self._group.keys():
            if 
            self.FrequencyUnit = self._group['FrequencyUnit'][0]
        else:
            print('FrequencyUnit', 'not found in', 'metaDataTags')


class Probe(_Group):

    wavelengths = None
    wavelengthsEmission = None
    sourcePos2D = None
    sourcePos3D = None
    detectorPos2D = None
    detectorPos3D = None
    frequencies = None
    timeDelays = None
    timeDelayWidths = None
    momentOrders = None
    correlationTimeDelays = None
    correlationTimeDelayWidths = None
    sourceLabels = None
    detectorLabels = None
    landmarkPos2D = None
    landmarkPos3D = None
    landmarkLabels = None
    useLocalIndex = None

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)
        if 'wavelengths' in self._group.keys():
            if 
            self.wavelengths = self._group['wavelengths'][0]
        else:
            print('wavelengths', 'not found in', 'probe')
        if 'wavelengthsEmission' in self._group.keys():
            if 
            self.wavelengthsEmission = self._group['wavelengthsEmission'][0]
        else:
            print('wavelengthsEmission', 'not found in', 'probe')
        if 'sourcePos2D' in self._group.keys():
            if 
            self.sourcePos2D = self._group['sourcePos2D'][0]
        else:
            print('sourcePos2D', 'not found in', 'probe')
        if 'sourcePos3D' in self._group.keys():
            if 
            self.sourcePos3D = self._group['sourcePos3D'][0]
        else:
            print('sourcePos3D', 'not found in', 'probe')
        if 'detectorPos2D' in self._group.keys():
            if 
            self.detectorPos2D = self._group['detectorPos2D'][0]
        else:
            print('detectorPos2D', 'not found in', 'probe')
        if 'detectorPos3D' in self._group.keys():
            if 
            self.detectorPos3D = self._group['detectorPos3D'][0]
        else:
            print('detectorPos3D', 'not found in', 'probe')
        if 'frequencies' in self._group.keys():
            if 
            self.frequencies = self._group['frequencies'][0]
        else:
            print('frequencies', 'not found in', 'probe')
        if 'timeDelays' in self._group.keys():
            if 
            self.timeDelays = self._group['timeDelays'][0]
        else:
            print('timeDelays', 'not found in', 'probe')
        if 'timeDelayWidths' in self._group.keys():
            if 
            self.timeDelayWidths = self._group['timeDelayWidths'][0]
        else:
            print('timeDelayWidths', 'not found in', 'probe')
        if 'momentOrders' in self._group.keys():
            if 
            self.momentOrders = self._group['momentOrders'][0]
        else:
            print('momentOrders', 'not found in', 'probe')
        if 'correlationTimeDelays' in self._group.keys():
            if 
            self.correlationTimeDelays = self._group['correlationTimeDelays'][0]
        else:
            print('correlationTimeDelays', 'not found in', 'probe')
        if 'correlationTimeDelayWidths' in self._group.keys():
            if 
            self.correlationTimeDelayWidths = self._group['correlationTimeDelayWidths'][0]
        else:
            print('correlationTimeDelayWidths', 'not found in', 'probe')
        if 'sourceLabels' in self._group.keys():
            if 
            self.sourceLabels = self._group['sourceLabels'][0]
        else:
            print('sourceLabels', 'not found in', 'probe')
        if 'detectorLabels' in self._group.keys():
            if 
            self.detectorLabels = self._group['detectorLabels'][0]
        else:
            print('detectorLabels', 'not found in', 'probe')
        if 'landmarkPos2D' in self._group.keys():
            if 
            self.landmarkPos2D = self._group['landmarkPos2D'][0]
        else:
            print('landmarkPos2D', 'not found in', 'probe')
        if 'landmarkPos3D' in self._group.keys():
            if 
            self.landmarkPos3D = self._group['landmarkPos3D'][0]
        else:
            print('landmarkPos3D', 'not found in', 'probe')
        if 'landmarkLabels' in self._group.keys():
            if 
            self.landmarkLabels = self._group['landmarkLabels'][0]
        else:
            print('landmarkLabels', 'not found in', 'probe')
        if 'useLocalIndex' in self._group.keys():
            if 
            self.useLocalIndex = self._group['useLocalIndex'][0]
        else:
            print('useLocalIndex', 'not found in', 'probe')


class NirsElement(_Group):

    metaDataTags = None
    data = None
    stim = None
    probe = None
    aux = None

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)


class Nirs(_IndexedGroup):

    _name: str = 'nirs'
    _element: _Group = NirsElement

    def __init__(self, f: h5py.File):
        super().__init__(f)

    def _append_group(self, gid):
        self.append(NirsElement(gid))


class DataElement(_Group):

    dataTimeSeries = None
    time = None
    measurementList = None

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)


class Data(_IndexedGroup):

    _name: str = 'data'
    _element: _Group = DataElement

    def __init__(self, f: h5py.File):
        super().__init__(f)

    def _append_group(self, gid):
        self.append(DataElement(gid))


class MeasurementListElement(_Group):

    sourceIndex = None
    detectorIndex = None
    wavelengthIndex = None
    wavelengthActual = None
    wavelengthEmissionActual = None
    dataType = None
    dataTypeLabel = None
    dataTypeIndex = None
    sourcePower = None
    detectorGain = None
    moduleIndex = None
    sourceModuleIndex = None
    detectorModuleIndex = None

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)


class MeasurementList(_IndexedGroup):

    _name: str = 'measurementList'
    _element: _Group = MeasurementListElement

    def __init__(self, f: h5py.File):
        super().__init__(f)

    def _append_group(self, gid):
        self.append(MeasurementListElement(gid))


class StimElement(_Group):

    name = None
    data = None
    dataLabels = None

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)


class Stim(_IndexedGroup):

    _name: str = 'stim'
    _element: _Group = StimElement

    def __init__(self, f: h5py.File):
        super().__init__(f)

    def _append_group(self, gid):
        self.append(StimElement(gid))


class AuxElement(_Group):

    name = None
    dataTimeSeries = None
    time = None
    timeOffset = None

    def __init__(self, gid: h5py.h5g.GroupID):
        super().__init__(gid)


class Aux(_IndexedGroup):

    _name: str = 'aux'
    _element: _Group = AuxElement

    def __init__(self, f: h5py.File):
        super().__init__(f)

    def _append_group(self, gid):
        self.append(AuxElement(gid))


class Snirf():
    
    _name = '/'
    formatVersion: str = None
    nirs: Nirs = ()
    
    def __init__(self, argv):
        if not argv.endswith('.snirf'):
            path = argv.join('.snirf')
        else:
            path = argv
        if os.path.exists(path):
            self._f = h5py.File(path, 'r+')
            print('Loading snirf', path)
            keys = self._f.keys()
            if 'formatVersion' in keys:
                self.formatVersion = self._f['formatVersion'][0].decode('ascii')
#            else:
#                raise SnirfFormatError(path, 'does not have a valid formatVersion')
            self.nirs = Nirs(self._f)

    def __repr__(self):
        return str(vars(self))

    def __del__(self):
        # TODO: this may be redundant
        self._f.close()
        